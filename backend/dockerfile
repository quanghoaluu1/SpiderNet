# Use the official .NET 8.0 SDK image for building
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build

# Set the working directory inside the container
WORKDIR /src

# Copy global.json to ensure correct SDK version
COPY global.json .

# Copy solution file
COPY spidernet_be.sln .

# Copy all project files for dependency restoration
COPY SpiderNet.WebApi/*.csproj SpiderNet.WebApi/
COPY SpiderNet.Application/*.csproj SpiderNet.Application/
COPY SpiderNet.Domain/*.csproj SpiderNet.Domain/
COPY SpiderNet.Infrastructure/*.csproj SpiderNet.Infrastructure/

# Restore dependencies
RUN dotnet restore

# Copy the entire source code
COPY . .

# Build the application in Release mode
RUN dotnet build -c Release --no-restore

# Publish the application
RUN dotnet publish SpiderNet.WebApi/SpiderNet.WebApi.csproj -c Release -o /app/publish --no-restore

# Use the official .NET 8.0 runtime image for the final stage
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS runtime

# Install curl for health checks (optional)
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

# Create a non-root user for security
RUN addgroup --system --gid 1001 appgroup && \
    adduser --system --uid 1001 --gid 1001 appuser

# Set the working directory
WORKDIR /app

# Copy the published application from the build stage
COPY --from=build /app/publish .

# Change ownership of the app directory to the non-root user
RUN chown -R appuser:appgroup /app

# Switch to the non-root user
USER appuser

# Expose the port that the application listens on
EXPOSE 8080

# Set environment variables for production
ENV ASPNETCORE_ENVIRONMENT=Production
ENV ASPNETCORE_URLS=http://+:8080

# Add health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Set the entry point for the container
ENTRYPOINT ["dotnet", "SpiderNet.WebApi.dll"]
